{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { createUserProfileDocument, auth, googleProvider, getCurrentUser } from '../../firebase/firebase.utils';\nimport { signInSuccess, signInFailure, signOutSucess, signOutFailure } from './user.actions';\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSucess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(isUserAuthenticated), call(onSignOutStart)]);\n}","map":{"version":3,"sources":["/home/tanya/TS/REACT/Projects/online-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","createUserProfileDocument","auth","googleProvider","getCurrentUser","signInSuccess","signInFailure","signOutSucess","signOutFailure","getSnapshotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","signOut","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","onSignOutStart","SIGN_OUT_START","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest,put,all,call} from 'redux-saga/effects';\nimport UserActionTypes from './user.types';  \n\nimport { createUserProfileDocument,auth,googleProvider, getCurrentUser } from '../../firebase/firebase.utils';\nimport {signInSuccess,signInFailure, signOutSucess,signOutFailure} from './user.actions';\n\nexport function* getSnapshotFromUserAuth(userAuth) {\n    try {\n      const userRef = yield call(createUserProfileDocument,userAuth);\n      const userSnapshot = yield userRef.get();\n      yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\n    } catch (error) {\n      yield put(signInFailure(error));\n    }\n}\n\nexport function* signOut(){\n    try{\n        yield auth.signOut();\n        yield put(signOutSucess())\n    }catch(error) {\n        yield put(signOutFailure(error));\n    }\n}\n  \nexport function* signInWithGoogle() {\n    try {\n      const { user } = yield auth.signInWithPopup(googleProvider);\n      yield getSnapshotFromUserAuth(user);\n    } catch (error) {\n      yield put(signInFailure(error));\n    }\n}\n  \nexport function* signInWithEmail({ payload: { email, password } }) {\n    try {\n      const { user } = yield auth.signInWithEmailAndPassword(email, password);\n      yield getSnapshotFromUserAuth(user);\n    } catch (error) {\n      yield put(signInFailure(error));\n    }\n}\n\nexport function* isUserAuthenticated() {\n    try{\n        const userAuth = yield getCurrentUser();\n        if(userAuth) return;\n        yield getSnapshotFromUserAuth(userAuth);\n    }catch(error) {\n        yield put(signInFailure(error))\n    }\n}\n  \nexport function* onGoogleSignInStart() {\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n\nexport function* onEmailSignInStart() {\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\n\nexport function* onCheckUserSession() {\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\n\nexport function* onSignOutStart() {\n    yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\n\nexport function* userSagas() {\n    yield all([\n        call(onGoogleSignInStart), \n        call(onEmailSignInStart),\n        call(isUserAuthenticated),\n        call(onSignOutStart)])\n}"]},"metadata":{},"sourceType":"module"}